package com.ecoinnova.pe.controller;

import java.io.IOException;
import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;

import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

import org.apache.jasper.JasperException;
import org.primefaces.context.RequestContext;
import org.primefaces.event.SelectEvent;
import org.primefaces.model.StreamedContent;

import com.ecoinnova.pe.jsf.util.Faces;
import com.ecoinnova.pe.model.TbClienteEntity;
import com.ecoinnova.pe.model.TbUsuarioEntity;
import com.ecoinnova.pe.services.interfaces.TbClienteServices;
import com.ecoinnova.pe.util.IReportManager;
import com.ecoinnova.pe.util.MyUtil;

@SessionScoped
@ManagedBean
public class ClienteController implements Serializable{

	private static final long serialVersionUID = 1L;

    @ManagedProperty("#{tbClienteServices}")
	TbClienteServices   tbClienteServices;
	
	private TbClienteEntity       clienteBean;
	private TbClienteEntity       clienteBeanSelect;
	private List<TbClienteEntity> listaCliente;
	private StreamedContent media;
	public ClienteController(){
		MyUtil.systemOutPrintln("Llamando constructor ClienteController()");
		clienteBean = new TbClienteEntity();
	}	
	
	

	public boolean cargarListaCliente() throws Exception{
		
		String msg;
    	try {
    		MyUtil.systemOutPrintln("Llamando cargarListaCliente()");
    	
    		listaCliente = tbClienteServices.findAllCliente();
    		
    		msg = "¡Lista cliente completa!";
    	    FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO,"Cliente", msg);
            FacesContext.getCurrentInstance().addMessage(null, message);
//            RequestContext.getCurrentInstance().update("formDataTable");
            
		} catch (Exception e) {
			msg = ""+e.getMessage();
            FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error en  listar cliente", msg);
            FacesContext.getCurrentInstance().addMessage(null, message);
            RequestContext.getCurrentInstance().update("messages");
            RequestContext.getCurrentInstance().update("growls");
		}
    	return true;
	}
	
	
	public void onRowSelectCliente(SelectEvent event ){
		MyUtil.systemOutPrintln("Llamando onRowSelectCliente()");
    	clienteBeanSelect = (TbClienteEntity) event.getObject();
    	//Para que no se quede pegado cod, nombre del empleado
    	
    	RequestContext.getCurrentInstance().update("formUpdate:txtCodigo");
    	RequestContext.getCurrentInstance().update("formUpdate:txtRUC");
    	RequestContext.getCurrentInstance().update("formUpdate:txtRazonS");
    	RequestContext.getCurrentInstance().update("formUpdate:txtDireccion");
    	
	}
	
	public void updateCliente(){
		try {
    		tbClienteServices.updateCliente(clienteBeanSelect);
    		String msg = "Se actualizo satisfactoriamente.";
    	    FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO,"Cliente", msg);
            FacesContext.getCurrentInstance().addMessage(null, message);
    		RequestContext.getCurrentInstance().update("formDataTable");
    		RequestContext.getCurrentInstance().update("growls");
    		RequestContext.getCurrentInstance().execute("PF('dlgUpdate').hide()");
    		
		} catch (Exception e) {
			String msg = "";
			msg =e.getMessage()!=null?"Mensaje: "+e.getMessage()+"\n":"";
			msg +=e.getCause()!=null?"Causa: "+e.getCause()+"":"";
            FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error Update", msg);
            FacesContext.getCurrentInstance().addMessage(null, message);
            RequestContext.getCurrentInstance().update("messages");
            RequestContext.getCurrentInstance().execute("PF('dlgUpdate').hide()");
		}finally{
			resetCliente();
		}
	}
	
	public void resetCliente(){
    	MyUtil.systemOutPrintln("Llamando resetCliente()");
		clienteBean = new TbClienteEntity();
		clienteBeanSelect = null;
	}
	
    public void addSelectedDelete(TbClienteEntity obj){
    	clienteBeanSelect = obj;
    }
    
	public void deleteCliente(){
	    	try {
	    		tbClienteServices.deleteCliente(clienteBeanSelect);
	    		String msg = "Se eliminó satisfactoriamente.";
	    	    FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO,"Cliente", msg);
	            FacesContext.getCurrentInstance().addMessage(null, message);
	    		RequestContext.getCurrentInstance().update("formDataTable");
	    		RequestContext.getCurrentInstance().update("growls");
	    		RequestContext.getCurrentInstance().execute("PF('dlgDelete').hide()");
			} catch (Exception e) {
				String msg = "";
				msg =e.getMessage()!=null?"Mensaje: "+e.getMessage()+"\n":"";
				msg +=e.getCause()!=null?"Causa: "+e.getCause()+"":"";
	            FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error Delete", msg);
	            FacesContext.getCurrentInstance().addMessage(null, message);
	            RequestContext.getCurrentInstance().update("messages");
	            RequestContext.getCurrentInstance().execute("PF('dlgDelete').hide()");
			}finally{
				resetCliente();
			}
	    }
	
	 public void generarCodigoCliente(){
	    	MyUtil.systemOutPrintln("Llamando generarCodigoCliente()");
	    	resetCliente();
	    	try {
	    		clienteBean.setCodigoCli(tbClienteServices.generarCodigoCliente());
	    		RequestContext.getCurrentInstance().update("formCreate:txtCodigo");
	        	RequestContext.getCurrentInstance().update("formCreate:txtRUC");
	        	RequestContext.getCurrentInstance().update("formCreate:txtRazonS");
	        	RequestContext.getCurrentInstance().update("formCreate:txtDireccion");
			} catch (Exception e) {
				MyUtil.systemOutPrintln(e.getMessage()+"");
				MyUtil.systemOutPrintln(e.getCause()+"");
			}
	    }
	    
	    public boolean recargarListaCliente(){
	    	String msg;
	    	try {
	    		MyUtil.systemOutPrintln("Llamando recargarListaCliente()");
	    		listaCliente = tbClienteServices.findAllCliente();
	    		msg = "¡Recarga completa!";
	    	    FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO,"Cliente", msg);
	            FacesContext.getCurrentInstance().addMessage(null, message);
	            RequestContext.getCurrentInstance().update("formDataTable");
	            RequestContext.getCurrentInstance().update("growls");
	            
			} catch (Exception e) {
				msg = ""+e.getMessage();
	            FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error en  listar cliente", msg);
	            FacesContext.getCurrentInstance().addMessage(null, message);
	            RequestContext.getCurrentInstance().update("messages");
	            RequestContext.getCurrentInstance().update("growls");
			}
	    	return true;
	    }
	    
	    public void createCliente(){
	    	
	    	try {
	    			tbClienteServices.insertCliente(clienteBean);
	    			String msg = "Se creó correctamente el registro.";
	        	    FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO,"Cliente", msg);
	                FacesContext.getCurrentInstance().addMessage(null, message);
	        		RequestContext.getCurrentInstance().update("formDataTable");
	        		RequestContext.getCurrentInstance().update("growls");
	        		RequestContext.getCurrentInstance().execute("PF('dlgCreate').hide()");
	    		
			} catch (Exception e) {
				String msg = "";
				msg =e.getMessage()!=null?"Mensaje: "+e.getMessage()+"\n":"";
				msg +=e.getCause()!=null?"Causa: "+e.getCause()+"":"";
	            FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error insert", msg);
	            FacesContext.getCurrentInstance().addMessage(null, message);
	            RequestContext.getCurrentInstance().update("messages");
	            RequestContext.getCurrentInstance().execute("PF('dlgCreate').hide()");
			}finally{
				resetCliente();
			}
	    }
	    
	    public boolean  generarReporteView()throws Exception {
	    	boolean salida = false;
	    	cargarListaCliente();
	    	imprimirPDF();
	    	if(media != null){
	    		salida = true;
	    	}else{
	    		salida = false;
	    	}
	    	listaCliente.clear();
	    	return salida;
	    	
	    }
	    

	    public void imprimirPDF() throws JasperException, IOException {
	    	try {
	            if(listaCliente != null && listaCliente.size() >0) {
	                Map<String, Object> param = new HashMap<String, Object>();
//	                param.put("BOLETA_N", headerBoletaReporte.getNumeroBoleta());
//	                param.put("FECHA_EMISION",headerBoletaReporte.getFechBoleta());
//	                param.put("CLIENTE",headerBoletaReporte.getRazonSocialCliente());
	                IReportManager ir = new IReportManager(null);
	                ir.setJasperPrint("/resources/reporte/ClientesReport.jasper", param, new JRBeanCollectionDataSource(listaCliente));
//	                ir.exportarPDF("Boleta_venta_ecoinnoca");
	                String nombPdf="clientesReporte.pdf";
	                media = ir.generateMediaPdf(nombPdf);
//	                media = ir.generateMediaPdf(new JRBeanCollectionDataSource(detalleBoletaReporteList),  param);
	                
	            } else {
	                Faces.addMessage("ERROR.!", "REPORTE VACIA!", FacesMessage.SEVERITY_ERROR);
	            } 
			} catch (Exception e) {
				e.printStackTrace();
				MyUtil.systemOutPrintln(""+e.getMessage());
				MyUtil.systemOutPrintln(""+e.getCause());
			}

	    }    	    
	    
	    
	public TbClienteEntity getClienteBean() {
		return clienteBean;
	}
	public void setClienteBean(TbClienteEntity clienteBean) {
		this.clienteBean = clienteBean;
	}
	public List<TbClienteEntity> getListaCliente() {
		return listaCliente;
	}
	public void setListaCliente(List<TbClienteEntity> listaCliente) {
		this.listaCliente = listaCliente;
	}
	public TbClienteEntity getClienteBeanSelect() {
		return clienteBeanSelect;
	}
	public void setClienteBeanSelect(TbClienteEntity clienteBeanSelect) {
		this.clienteBeanSelect = clienteBeanSelect;
	}
	public void setTbClienteServices(TbClienteServices tbClienteServices) {
		this.tbClienteServices = tbClienteServices;
	}
	public StreamedContent getMedia() {
		return media;
	}
	public void setMedia(StreamedContent media) {
		this.media = media;
	}
	
	
}
