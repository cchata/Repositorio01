package com.ecoinnova.pe.controller;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;

import org.primefaces.context.RequestContext;
import org.primefaces.event.SelectEvent;

import com.ecoinnova.pe.bean.Usuario;
import com.ecoinnova.pe.jsf.util.Faces;
import com.ecoinnova.pe.model.TbBoletaEntity;
import com.ecoinnova.pe.model.TbClienteEntity;
import com.ecoinnova.pe.model.TbDetalleBoletaEntity;
import com.ecoinnova.pe.model.TbEmpleadoEntity;
import com.ecoinnova.pe.model.TbProductoEntity;
import com.ecoinnova.pe.services.interfaces.TbBoletaServices;
import com.ecoinnova.pe.util.MyUtil;

@SessionScoped
@ManagedBean
public class BoletaController implements Serializable{

	private static final long serialVersionUID = 1L;

    @ManagedProperty("#{tbBoletaServices}")
    TbBoletaServices   tbBoletaServices;
    
    @ManagedProperty(value = "#{productoController}")
    private ProductoController productoController;
    
    

    private boolean btnBuscarCliente;
    private boolean btnNuevoCliente;
    private boolean btnNuevaBoleta;
    private boolean btnGuardar;
    private boolean btnCancelar;
    private boolean btnSalir;
    
    private boolean inputCodigoBoleta;
    private boolean inputFechaBoleta;
    private boolean inputCodigoCliente;
    private boolean inputNombreCliente;
    
    private boolean inputCodigoProducto;
    private boolean inputNombreProducto;
    private boolean inputStockProducto;
    private boolean inputPrecioVentaProducto;
    private boolean inputCantidadProducto;
    
    private boolean btnAgregarProducto;
    private boolean btnLimpiarProducto;
    private boolean btnQuitarProducto;

    private boolean inputTotalApagar;
    
    private TbBoletaEntity boletaBean;
    
    private List<TbProductoEntity> productoBeanList;    
    
    private TbDetalleBoletaEntity detalleBoletaBean;
    
    private TbProductoEntity productoBeanSelect;
    
    private List<TbDetalleBoletaEntity> detalleBoletaBeanList;
    
    private TbDetalleBoletaEntity detalleBoletaCopyBean;
    
    private double totalApagar;
    
	public  BoletaController(){
		MyUtil.systemOutPrintln("Llamando al constructor BoletaController()");
		boletaBean        = new TbBoletaEntity();
		productoBeanList  = new ArrayList<TbProductoEntity>();
		
		detalleBoletaBeanList = new ArrayList<TbDetalleBoletaEntity>();
//		boletaBean.setTbEmpleado(new TbEmpleadoEntity());
		
		totalApagar = 0.0;
		
	    btnBuscarCliente = true;
	    btnNuevoCliente  = true;
	    btnNuevaBoleta   = false;
	    btnGuardar       = true;
	    btnCancelar      = true;
	    btnSalir         = false;
	    
	    inputCodigoBoleta  = true;
	    inputFechaBoleta   = true;
	    inputCodigoCliente = true;
	    inputNombreCliente = true;
	    
	    inputCodigoProducto      = true;
	    inputNombreProducto      = true;
	    inputStockProducto       = true;
	    inputPrecioVentaProducto = true;
	    inputCantidadProducto    = true;
	    
	    btnAgregarProducto = true;
	    btnLimpiarProducto = true;
	    btnQuitarProducto  = true;
	    inputTotalApagar   = true;
    }
    


	public String salirGestionVenta(){
		MyUtil.systemOutPrintln("Llamando salirGestionVenta()");
		String url = "";
		try {
			 url = "index?faces-redirect=true";
			 RequestContext.getCurrentInstance().update("growls");
		} catch (Exception e) {
			MyUtil.systemOutPrintln("Llamando Exception e");
			MyUtil.systemOutPrintln(e.getMessage()+"");
			MyUtil.systemOutPrintln(e.getCause()+"");
			MyUtil.systemOutPrintln(e.getLocalizedMessage()+"");
		}
		return url;
	}
	
	 public void generarCodigoBoleta(){
	    	MyUtil.systemOutPrintln("Llamando generarCodigoBoleta()");
	    	resetBoleta();
	    	try {
	    		boletaBean.setCodigoBol(tbBoletaServices.generarCodigoBoleta());
	    		Usuario usu = ((Usuario)FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get(Faces.ATTRIBUTE_USER));
	    		TbEmpleadoEntity tbEmpleadoBean = new TbEmpleadoEntity();
	    		tbEmpleadoBean.setCodigoEmp(usu.getCodigoEmpleado());
	    		boletaBean.setTbEmpleado(tbEmpleadoBean);
	    		//Sett cod cliente ya esta seteado en la vista.
	    		boletaBean.setFechaBol(new Date());
	    		
	    		
	    		productoController.cargarListaProducto();
	    		
	    		productoBeanList = productoController.getProductoList();
	    		
    		    btnBuscarCliente = false;
    		    btnNuevoCliente  = false;
    		    btnNuevaBoleta   = true;
    		    btnGuardar       = false;
    		    btnCancelar      = false;
    		    btnSalir         = true;
    		    inputCodigoBoleta  = false;
    		    inputFechaBoleta   = false;
    		    inputCodigoCliente = false;
    		    inputNombreCliente = false;
    		    inputCodigoProducto      = false;
    		    inputNombreProducto      = false;
    		    inputStockProducto       = false;
    		    inputPrecioVentaProducto = false;
    		    inputCantidadProducto    = false;
    		    btnAgregarProducto = false;
    		    btnLimpiarProducto = false;
    		    btnQuitarProducto  = false;
    		    inputTotalApagar   = false;
	    		    
    		    RequestContext.getCurrentInstance().update("formDataTable:txtCodigoBolVenta");
    		    RequestContext.getCurrentInstance().update("formDataTable:txtFecha");
    		    RequestContext.getCurrentInstance().update("formDataTable:txtCodigoCliente");
    		    RequestContext.getCurrentInstance().update("formDataTable:txtNombreCliente");
    		    RequestContext.getCurrentInstance().update("formDataTable:idBtnBuscarCliente");
    		    RequestContext.getCurrentInstance().update("formDataTable:idBtnNuevoCliente");
    		    
    		    RequestContext.getCurrentInstance().update("formDataTable:txtCodigoProducto");
    		    RequestContext.getCurrentInstance().update("formDataTable:txtNombreProducto");
    		    RequestContext.getCurrentInstance().update("formDataTable:txtStock");
    		    RequestContext.getCurrentInstance().update("formDataTable:txtPrecio");
    		    RequestContext.getCurrentInstance().update("formDataTable:txtCantidad");
    		    
    		    RequestContext.getCurrentInstance().update("formDataTable:idBtnAgregarProducto");
    		    RequestContext.getCurrentInstance().update("formDataTable:idBtnLimpiarProducto");
    		    RequestContext.getCurrentInstance().update("formDataTable:idBtnQuitar");
    		    
    		    
    		    RequestContext.getCurrentInstance().update("formDataTable:txtTotalPagar");
    		    
    		    RequestContext.getCurrentInstance().update("formDataTable:idBtnNuevaBoleta");
    		    RequestContext.getCurrentInstance().update("formDataTable:idBtnGuardarBoleta");
    		    RequestContext.getCurrentInstance().update("formDataTable:idBtnCancelarBoleta");
    		    RequestContext.getCurrentInstance().update("formDataTable:idBtnSalir");
    		    
    		    RequestContext.getCurrentInstance().update("formDataTable:idProductos");
	    		
	    		
			} catch (Exception e) {
				MyUtil.systemOutPrintln("Error: "+e.getMessage()+"");
				MyUtil.systemOutPrintln("Error: "+e.getCause()+"");
			}
	    }

	 
	 public void cancelarBoleta(){
	    	MyUtil.systemOutPrintln("Llamando cancelarBoleta()");
	    	resetBoleta();
	    	try {
	    		btnBuscarCliente = true;
    		    btnNuevoCliente  = true;
    		    btnNuevaBoleta   = false;
    		    btnGuardar       = true;
    		    btnCancelar      = true;
    		    btnSalir         = false;
    		    
    		    inputCodigoBoleta  = true;
    		    inputFechaBoleta   = true;
    		    inputCodigoCliente = true;
    		    inputNombreCliente = true;
    		    
    		    inputCodigoProducto      = true;
    		    inputNombreProducto      = true;
    		    inputStockProducto       = true;
    		    inputPrecioVentaProducto = true;
    		    inputCantidadProducto    = true;
    		    
    		    btnAgregarProducto = true;
    		    btnLimpiarProducto = true;
    		    btnQuitarProducto  = true;
    		    inputTotalApagar   = true;
	    		    
	 		    RequestContext.getCurrentInstance().update("formDataTable:txtCodigoBolVenta");
	 		    RequestContext.getCurrentInstance().update("formDataTable:txtFecha");
	 		    RequestContext.getCurrentInstance().update("formDataTable:txtCodigoCliente");
	 		    RequestContext.getCurrentInstance().update("formDataTable:txtNombreCliente");
	 		    RequestContext.getCurrentInstance().update("formDataTable:idBtnBuscarCliente");
	 		    RequestContext.getCurrentInstance().update("formDataTable:idBtnNuevoCliente");
	 		    
	 		    RequestContext.getCurrentInstance().update("formDataTable:txtCodigoProducto");
	 		    RequestContext.getCurrentInstance().update("formDataTable:txtNombreProducto");
	 		    RequestContext.getCurrentInstance().update("formDataTable:txtStock");
	 		    RequestContext.getCurrentInstance().update("formDataTable:txtPrecio");
	 		    RequestContext.getCurrentInstance().update("formDataTable:txtCantidad");
	 		    
	 		    RequestContext.getCurrentInstance().update("formDataTable:idBtnAgregarProducto");
	 		    RequestContext.getCurrentInstance().update("formDataTable:idBtnLimpiarProducto");
	 		    RequestContext.getCurrentInstance().update("formDataTable:idBtnQuitar");
	 		    
	 		    
	 		    RequestContext.getCurrentInstance().update("formDataTable:txtTotalPagar");
	 		    
	 		    RequestContext.getCurrentInstance().update("formDataTable:idBtnNuevaBoleta");
	 		    RequestContext.getCurrentInstance().update("formDataTable:idBtnGuardarBoleta");
	 		    RequestContext.getCurrentInstance().update("formDataTable:idBtnCancelarBoleta");
	 		    RequestContext.getCurrentInstance().update("formDataTable:idBtnSalir");
	    		
	 		   RequestContext.getCurrentInstance().update("formDataTable:idProductos");
	 		   
			} catch (Exception e) {
				MyUtil.systemOutPrintln("Error: "+e.getMessage()+"");
				MyUtil.systemOutPrintln("Error: "+e.getCause()+"");
			}
	    }

	public void resetBoleta(){
		boletaBean        = new TbBoletaEntity(); 
		productoBeanList  = new ArrayList<TbProductoEntity>();
		detalleBoletaBean = new TbDetalleBoletaEntity();
		
	}
	
	public void onRowSelectCliente(SelectEvent event){
		MyUtil.systemOutPrintln("Llamando onRowSelectCliente()");
		TbClienteEntity clienteBeanSelect =	(TbClienteEntity)event.getObject();
		
		
		
		
		MyUtil.systemOutPrintln("clienteBeanSelect.getCodigoCli()= "+clienteBeanSelect.getCodigoCli());
		MyUtil.systemOutPrintln("clienteBeanSelect.getRazonSocialCli()= "+clienteBeanSelect.getRazonSocialCli());
		
		boletaBean.setTbCliente(clienteBeanSelect);
		
				
		RequestContext.getCurrentInstance().update("formDataTable:txtCodigoCliente");
		RequestContext.getCurrentInstance().update("formDataTable:txtNombreCliente");
	}
	
	public void onRowSelectProducto(SelectEvent event){
		MyUtil.systemOutPrintln("Llamando onRowSelectProducto()");
		detalleBoletaBean = new TbDetalleBoletaEntity();
		productoBeanSelect =	(TbProductoEntity)event.getObject();
		
		detalleBoletaBean.setTbBoleta(boletaBean);
		detalleBoletaBean.setTbProducto(productoBeanSelect);
		detalleBoletaBean.setPrecioBol(productoBeanSelect.getPrecioVentaPro());
//		detalleBoletaBean.setCantidadBol(cantidad); Se settea en la vista.
		
		detalleBoletaCopyBean = detalleBoletaBean; 
		
		MyUtil.systemOutPrintln("Cod. boleta: "+detalleBoletaBean.getTbBoleta().getCodigoBol());
		MyUtil.systemOutPrintln("Cod. produt: "+detalleBoletaBean.getTbProducto().getCodigoPro());
		MyUtil.systemOutPrintln("nomb. produ: "+detalleBoletaBean.getTbProducto().getNombrePro());
		MyUtil.systemOutPrintln("precio bole: "+detalleBoletaBean.getPrecioBol()+"");
		MyUtil.systemOutPrintln("cantid bole: "+detalleBoletaBean.getCantidadBol()+"");
		
		RequestContext.getCurrentInstance().update("formDataTable:txtCodigoProducto");
		RequestContext.getCurrentInstance().update("formDataTable:txtNombreProducto");
		RequestContext.getCurrentInstance().update("formDataTable:txtStock");
		RequestContext.getCurrentInstance().update("formDataTable:txtPrecio");
		RequestContext.getCurrentInstance().update("formDataTable:txtCantidad");
		
		MyUtil.systemOutPrintln("Cod. boleta: "+detalleBoletaBean.getTbBoleta().getCodigoBol());
		MyUtil.systemOutPrintln("Cantidad   : "+detalleBoletaBean.getCantidadBol());
		
	}
	
	
	
	public void limpiarDatosProductos(){
		MyUtil.systemOutPrintln("Llamando limpiarDatosProductos()");
		productoBeanSelect = new TbProductoEntity();
		detalleBoletaBean  = new TbDetalleBoletaEntity();
		
		RequestContext.getCurrentInstance().update("formDataTable:txtCodigoProducto");
		RequestContext.getCurrentInstance().update("formDataTable:txtNombreProducto");
		RequestContext.getCurrentInstance().update("formDataTable:txtStock");
		RequestContext.getCurrentInstance().update("formDataTable:txtPrecio");
		RequestContext.getCurrentInstance().update("formDataTable:txtCantidad");
	}
	
	public void agregarProducto(){
		MyUtil.systemOutPrintln("Llamando agregarProducto()");
		
		if(detalleBoletaCopyBean == null){
			System.out.println("detalleBoletaCopyBean is Null");
		}else{
			System.out.println("detalleBoletaCopyBean is Ok");
		}
		
//		MyUtil.systemOutPrintln("Cod. boleta: "+detalleBoletaBean.getTbBoleta().getCodigoBol());
//		MyUtil.systemOutPrintln("Cod. produt: "+detalleBoletaBean.getTbProducto().getCodigoPro());
//		MyUtil.systemOutPrintln("nomb. produ: "+detalleBoletaBean.getTbProducto().getNombrePro());
//		MyUtil.systemOutPrintln("precio bole: "+detalleBoletaBean.getPrecioBol()+"");
//		MyUtil.systemOutPrintln("cantid bole: "+detalleBoletaBean.getCantidadBol()+"");
		
		
		double importe = detalleBoletaCopyBean.getPrecioBol().doubleValue()*detalleBoletaCopyBean.getCantidadBol();
		detalleBoletaCopyBean.setImporte(importe);
		detalleBoletaBeanList.add(detalleBoletaCopyBean);
		
		totalApagar +=importe;
		
//		productoBeanSelect = new TbProductoEntity();
//		detalleBoletaBean  = new TbDetalleBoletaEntity();
		
		RequestContext.getCurrentInstance().update("formDataTable:txtCodigoProducto");
		RequestContext.getCurrentInstance().update("formDataTable:txtNombreProducto");
		RequestContext.getCurrentInstance().update("formDataTable:txtStock");
		RequestContext.getCurrentInstance().update("formDataTable:txtPrecio");
		RequestContext.getCurrentInstance().update("formDataTable:txtCantidad");
		
		RequestContext.getCurrentInstance().update("formDataTable:idProductosComprar");
		RequestContext.getCurrentInstance().update("formDataTable:txtTotalPagar");
	}
	
//	---------------------------------------------------
	public void setTbBoletaServices(TbBoletaServices tbBoletaServices) {
		this.tbBoletaServices = tbBoletaServices;
	}
	public boolean isBtnBuscarCliente() {
		return btnBuscarCliente;
	}
	public void setBtnBuscarCliente(boolean btnBuscarCliente) {
		this.btnBuscarCliente = btnBuscarCliente;
	}
	public boolean isBtnNuevoCliente() {
		return btnNuevoCliente;
	}
	public void setBtnNuevoCliente(boolean btnNuevoCliente) {
		this.btnNuevoCliente = btnNuevoCliente;
	}
	public boolean isBtnNuevaBoleta() {
		return btnNuevaBoleta;
	}
	public void setBtnNuevaBoleta(boolean btnNuevaBoleta) {
		this.btnNuevaBoleta = btnNuevaBoleta;
	}
	public boolean isBtnGuardar() {
		return btnGuardar;
	}
	public void setBtnGuardar(boolean btnGuardar) {
		this.btnGuardar = btnGuardar;
	}
	public boolean isBtnCancelar() {
		return btnCancelar;
	}
	public void setBtnCancelar(boolean btnCancelar) {
		this.btnCancelar = btnCancelar;
	}
	public boolean isBtnSalir() {
		return btnSalir;
	}
	public void setBtnSalir(boolean btnSalir) {
		this.btnSalir = btnSalir;
	}



	public boolean isInputCodigoBoleta() {
		return inputCodigoBoleta;
	}
	public void setInputCodigoBoleta(boolean inputCodigoBoleta) {
		this.inputCodigoBoleta = inputCodigoBoleta;
	}
	public boolean isInputFechaBoleta() {
		return inputFechaBoleta;
	}
	public void setInputFechaBoleta(boolean inputFechaBoleta) {
		this.inputFechaBoleta = inputFechaBoleta;
	}
	public boolean isInputCodigoCliente() {
		return inputCodigoCliente;
	}
	public void setInputCodigoCliente(boolean inputCodigoCliente) {
		this.inputCodigoCliente = inputCodigoCliente;
	}
	public boolean isInputNombreCliente() {
		return inputNombreCliente;
	}
	public void setInputNombreCliente(boolean inputNombreCliente) {
		this.inputNombreCliente = inputNombreCliente;
	}
	public boolean isInputCodigoProducto() {
		return inputCodigoProducto;
	}
	public void setInputCodigoProducto(boolean inputCodigoProducto) {
		this.inputCodigoProducto = inputCodigoProducto;
	}
	public boolean isInputNombreProducto() {
		return inputNombreProducto;
	}
	public void setInputNombreProducto(boolean inputNombreProducto) {
		this.inputNombreProducto = inputNombreProducto;
	}
	public boolean isInputStockProducto() {
		return inputStockProducto;
	}
	public void setInputStockProducto(boolean inputStockProducto) {
		this.inputStockProducto = inputStockProducto;
	}
	public boolean isInputPrecioVentaProducto() {
		return inputPrecioVentaProducto;
	}
	public void setInputPrecioVentaProducto(boolean inputPrecioVentaProducto) {
		this.inputPrecioVentaProducto = inputPrecioVentaProducto;
	}
	public boolean isInputCantidadProducto() {
		return inputCantidadProducto;
	}
	public void setInputCantidadProducto(boolean inputCantidadProducto) {
		this.inputCantidadProducto = inputCantidadProducto;
	}
	public boolean isBtnAgregarProducto() {
		return btnAgregarProducto;
	}
	public void setBtnAgregarProducto(boolean btnAgregarProducto) {
		this.btnAgregarProducto = btnAgregarProducto;
	}
	public boolean isBtnLimpiarProducto() {
		return btnLimpiarProducto;
	}
	public void setBtnLimpiarProducto(boolean btnLimpiarProducto) {
		this.btnLimpiarProducto = btnLimpiarProducto;
	}
	public boolean isBtnQuitarProducto() {
		return btnQuitarProducto;
	}
	public void setBtnQuitarProducto(boolean btnQuitarProducto) {
		this.btnQuitarProducto = btnQuitarProducto;
	}
	public boolean isInputTotalApagar() {
		return inputTotalApagar;
	}
	public void setInputTotalApagar(boolean inputTotalApagar) {
		this.inputTotalApagar = inputTotalApagar;
	}
	public TbBoletaEntity getBoletaBean() {
		return boletaBean;
	}
	public void setBoletaBean(TbBoletaEntity boletaBean) {
		this.boletaBean = boletaBean;
	}
	public ProductoController getProductoController() {
		return productoController;
	}
	public void setProductoController(ProductoController productoController) {
		this.productoController = productoController;
	}
	public List<TbProductoEntity> getProductoBeanList() {
		return productoBeanList;
	}
	public void setProductoBeanList(List<TbProductoEntity> productoBeanList) {
		this.productoBeanList = productoBeanList;
	}
	public TbDetalleBoletaEntity getDetalleBoletaBean() {
		return detalleBoletaBean;
	}
	public void setDetalleBoletaBean(TbDetalleBoletaEntity detalleBoletaBean) {
		this.detalleBoletaBean = detalleBoletaBean;
	}
	public TbProductoEntity getProductoBeanSelect() {
		return productoBeanSelect;
	}
	public void setProductoBeanSelect(TbProductoEntity productoBeanSelect) {
		this.productoBeanSelect = productoBeanSelect;
	}
	public List<TbDetalleBoletaEntity> getDetalleBoletaBeanList() {
		return detalleBoletaBeanList;
	}
	public void setDetalleBoletaBeanList(
			List<TbDetalleBoletaEntity> detalleBoletaBeanList) {
		this.detalleBoletaBeanList = detalleBoletaBeanList;
	}
	public TbDetalleBoletaEntity getDetalleBoletaCopyBean() {
		return detalleBoletaCopyBean;
	}
	public void setDetalleBoletaCopyBean(TbDetalleBoletaEntity detalleBoletaCopyBean) {
		this.detalleBoletaCopyBean = detalleBoletaCopyBean;
	}
	public double getTotalApagar() {
		return totalApagar;
	}
	public void setTotalApagar(double totalApagar) {
		this.totalApagar = totalApagar;
	}
	
}
